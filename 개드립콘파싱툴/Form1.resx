<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        EAAABCj/AouKiWoqjmAWAAAAAElFTkSuQmCC
</value>
  </data>
</root>